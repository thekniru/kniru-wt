#!/usr/bin/env bash

# Git Worktree Manager (wt)
# A powerful CLI tool for managing git worktrees efficiently
# Copyright 2024 Kniru
# Licensed under the Apache License, Version 2.0
# Version: 1.0.0

# Enable strict error handling
set -euo pipefail

# Color codes for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Default Configuration
DEFAULT_BASE_BRANCH="main"  # Default branch to create worktrees from
EDITOR_COMMAND="cursor"     # Default editor command
WORKTREES_SUFFIX="-worktrees"  # Suffix for worktrees directory

# Load user configuration if exists
CONFIG_FILE="$HOME/.wtrc"
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

# Function to display usage information
usage() {
    cat << EOF
$(echo -e "${CYAN}Git Worktree Manager (wt)${NC}")
$(echo -e "${YELLOW}A powerful CLI tool for managing git worktrees${NC}")

$(echo -e "${GREEN}USAGE:${NC}")
    wt <command> [options]

$(echo -e "${GREEN}COMMANDS:${NC}")
    wt <branch-name>              Create a new worktree with the given branch name
    wt list                       List all worktrees for the current project
    wt remove <branch-name>       Remove a worktree
    wt switch <branch-name>       Switch to an existing worktree
    wt clean                      Remove all worktrees with deleted branches
    wt status                     Show status of all worktrees
    wt help                       Show this help message

$(echo -e "${GREEN}OPTIONS:${NC}")
    -b, --base <branch>          Base branch to create worktree from (default: main)
    -e, --editor <command>       Editor command to open worktree (default: cursor)
    -n, --no-open               Don't open the worktree in editor after creation
    -f, --force                 Force remove worktree even if it has uncommitted changes

$(echo -e "${GREEN}EXAMPLES:${NC}")
    wt feature-auth              Create worktree 'feature-auth' from main branch
    wt feature-api -b develop    Create worktree 'feature-api' from develop branch
    wt list                      List all worktrees
    wt remove feature-auth       Remove the 'feature-auth' worktree
    wt switch feature-api        Switch to 'feature-api' worktree in editor

$(echo -e "${GREEN}NOTES:${NC}")
    - Worktrees are created in a '{project-name}-worktrees' folder adjacent to your main project
    - Each worktree is a separate branch that can be worked on independently
    - The main repository and all worktrees share the same git history

EOF
}

# Function to print colored messages
print_error() {
    echo -e "${RED}ERROR: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not in a git repository"
        exit 1
    fi
}

# Function to get the main repository path
get_main_repo_path() {
    # Get the git directory
    local git_dir=$(git rev-parse --git-dir)
    
    # If we're in a worktree, get the main repository path
    if [[ -f "$git_dir/gitdir" ]]; then
        # We're in a worktree, find the main repository
        local main_git_dir=$(cat "$git_dir/gitdir" | sed 's/\.git\/worktrees\/.*/\.git/')
        echo $(dirname "$main_git_dir")
    else
        # We're in the main repository
        echo $(git rev-parse --show-toplevel)
    fi
}

# Function to get the worktrees directory path
get_worktrees_dir() {
    local main_repo_path="$1"
    local repo_name=$(basename "$main_repo_path")
    local parent_dir=$(dirname "$main_repo_path")
    echo "$parent_dir/${repo_name}${WORKTREES_SUFFIX}"
}

# Function to create a new worktree
create_worktree() {
    local branch_name="$1"
    local base_branch="${2:-$DEFAULT_BASE_BRANCH}"
    local open_editor="${3:-true}"
    
    # Check if we're in a git repository
    check_git_repo
    
    # Get paths
    local main_repo_path=$(get_main_repo_path)
    local worktrees_dir=$(get_worktrees_dir "$main_repo_path")
    local worktree_path="$worktrees_dir/$branch_name"
    
    print_info "Creating worktree '$branch_name' from branch '$base_branch'"
    
    # Create worktrees directory if it doesn't exist
    if [[ ! -d "$worktrees_dir" ]]; then
        print_info "Creating worktrees directory: $worktrees_dir"
        mkdir -p "$worktrees_dir"
    fi
    
    # Check if worktree already exists
    if [[ -d "$worktree_path" ]]; then
        print_error "Worktree '$branch_name' already exists at $worktree_path"
        exit 1
    fi
    
    # Check if branch already exists
    if git show-ref --quiet "refs/heads/$branch_name"; then
        print_warning "Branch '$branch_name' already exists, creating worktree with existing branch"
        # Create worktree with existing branch
        if ! git worktree add "$worktree_path" "$branch_name"; then
            print_error "Failed to create worktree"
            exit 1
        fi
    else
        # Ensure base branch exists
        if ! git show-ref --quiet "refs/heads/$base_branch"; then
            print_error "Base branch '$base_branch' does not exist"
            print_info "Available branches:"
            git branch -a
            exit 1
        fi
        
        # Create new branch and worktree
        if ! git worktree add -b "$branch_name" "$worktree_path" "$base_branch"; then
            print_error "Failed to create worktree"
            exit 1
        fi
    fi
    
    print_success "Created worktree at: $worktree_path"
    
    # Open in editor if requested
    if [[ "$open_editor" == "true" ]]; then
        print_info "Opening worktree in $EDITOR_COMMAND"
        $EDITOR_COMMAND "$worktree_path" &
    fi
}

# Function to list all worktrees
list_worktrees() {
    check_git_repo
    
    print_info "Worktrees for current project:"
    echo ""
    
    # Use git worktree list with porcelain format for parsing
    git worktree list --porcelain | awk '
        /^worktree/ { 
            path = $2
            # Extract just the folder name from the full path
            n = split(path, parts, "/")
            folder = parts[n]
        }
        /^HEAD/ { 
            commit = $2 
        }
        /^branch/ { 
            branch = $2
            gsub("refs/heads/", "", branch)
            # Print formatted output
            printf "  %-30s %-30s %s\n", folder, branch, substr(commit, 1, 7)
        }
        BEGIN {
            printf "  %-30s %-30s %s\n", "WORKTREE", "BRANCH", "COMMIT"
            printf "  %-30s %-30s %s\n", "--------", "------", "------"
        }
    '
}

# Function to remove a worktree
remove_worktree() {
    local branch_name="$1"
    local force="${2:-false}"
    
    check_git_repo
    
    # Get paths
    local main_repo_path=$(get_main_repo_path)
    local worktrees_dir=$(get_worktrees_dir "$main_repo_path")
    local worktree_path="$worktrees_dir/$branch_name"
    
    # Check if worktree exists
    if [[ ! -d "$worktree_path" ]]; then
        print_error "Worktree '$branch_name' does not exist"
        exit 1
    fi
    
    # Remove the worktree
    if [[ "$force" == "true" ]]; then
        print_warning "Force removing worktree '$branch_name'"
        git worktree remove --force "$worktree_path"
    else
        print_info "Removing worktree '$branch_name'"
        if ! git worktree remove "$worktree_path"; then
            print_error "Failed to remove worktree. Use -f/--force to force removal"
            exit 1
        fi
    fi
    
    print_success "Removed worktree '$branch_name'"
    
    # Ask if user wants to delete the branch as well
    echo -n "Do you want to delete the branch '$branch_name' as well? (y/N): "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        if git branch -D "$branch_name" 2>/dev/null; then
            print_success "Deleted branch '$branch_name'"
        else
            print_warning "Could not delete branch '$branch_name' (might be checked out elsewhere)"
        fi
    fi
}

# Function to switch to a worktree
switch_worktree() {
    local branch_name="$1"
    
    check_git_repo
    
    # Get paths
    local main_repo_path=$(get_main_repo_path)
    local worktrees_dir=$(get_worktrees_dir "$main_repo_path")
    local worktree_path="$worktrees_dir/$branch_name"
    
    # Check if worktree exists
    if [[ ! -d "$worktree_path" ]]; then
        print_error "Worktree '$branch_name' does not exist"
        print_info "Available worktrees:"
        list_worktrees
        exit 1
    fi
    
    print_info "Switching to worktree '$branch_name'"
    $EDITOR_COMMAND "$worktree_path" &
    print_success "Opened worktree in $EDITOR_COMMAND"
}

# Function to clean up worktrees with deleted branches
clean_worktrees() {
    check_git_repo
    
    print_info "Cleaning up worktrees with deleted branches..."
    
    # Prune worktree information
    git worktree prune
    
    # Find and remove worktrees with missing branches
    local removed_count=0
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            local worktree_path=$(echo "$line" | awk '{print $1}')
            local worktree_name=$(basename "$worktree_path")
            print_info "Removing orphaned worktree: $worktree_name"
            git worktree remove "$worktree_path" 2>/dev/null || true
            ((removed_count++))
        fi
    done < <(git worktree list --porcelain | grep -B2 "detached" | grep "^worktree" | awk '{print $2}')
    
    if [[ $removed_count -eq 0 ]]; then
        print_success "No orphaned worktrees found"
    else
        print_success "Removed $removed_count orphaned worktree(s)"
    fi
}

# Function to show status of all worktrees
show_status() {
    check_git_repo
    
    print_info "Status of all worktrees:"
    echo ""
    
    # Get the current directory to identify current worktree
    local current_dir=$(pwd)
    
    # Process each worktree
    git worktree list --porcelain | awk -v current="$current_dir" '
        /^worktree/ { 
            path = $2
            # Check if this is the current worktree
            is_current = (path == current) ? "*" : " "
        }
        /^HEAD/ { 
            commit = $2 
        }
        /^branch/ { 
            branch = $2
            gsub("refs/heads/", "", branch)
            
            # Get the folder name
            n = split(path, parts, "/")
            folder = parts[n]
            
            # Check for uncommitted changes
            cmd = "cd \"" path "\" && git status --porcelain 2>/dev/null | wc -l"
            cmd | getline changes
            close(cmd)
            
            # Format status
            status = (changes > 0) ? "(" changes " uncommitted changes)" : "(clean)"
            
            # Print formatted output
            printf "%s %-25s %-25s %-8s %s\n", is_current, folder, branch, substr(commit, 1, 7), status
        }
        BEGIN {
            printf "  %-25s %-25s %-8s %s\n", "WORKTREE", "BRANCH", "COMMIT", "STATUS"
            printf "  %-25s %-25s %-8s %s\n", "--------", "------", "------", "------"
        }
    '
    
    echo ""
    print_info "* = current worktree"
}

# Main function to parse arguments and execute commands
main() {
    # Check if no arguments provided
    if [[ $# -eq 0 ]]; then
        usage
        exit 0
    fi
    
    # Parse the command
    local command="$1"
    shift
    
    case "$command" in
        "help"|"-h"|"--help")
            usage
            exit 0
            ;;
        "list"|"ls")
            list_worktrees
            ;;
        "remove"|"rm")
            if [[ $# -eq 0 ]]; then
                print_error "Please specify a worktree name to remove"
                exit 1
            fi
            local force=false
            local worktree_name=""
            
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    -f|--force)
                        force=true
                        shift
                        ;;
                    *)
                        worktree_name="$1"
                        shift
                        ;;
                esac
            done
            
            remove_worktree "$worktree_name" "$force"
            ;;
        "switch"|"sw")
            if [[ $# -eq 0 ]]; then
                print_error "Please specify a worktree name to switch to"
                exit 1
            fi
            switch_worktree "$1"
            ;;
        "clean")
            clean_worktrees
            ;;
        "status"|"st")
            show_status
            ;;
        *)
            # Treat as branch name for creating worktree
            local branch_name="$command"
            local base_branch="$DEFAULT_BASE_BRANCH"
            local open_editor=true
            
            # Parse options
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    -b|--base)
                        base_branch="$2"
                        shift 2
                        ;;
                    -e|--editor)
                        EDITOR_COMMAND="$2"
                        shift 2
                        ;;
                    -n|--no-open)
                        open_editor=false
                        shift
                        ;;
                    *)
                        print_error "Unknown option: $1"
                        usage
                        exit 1
                        ;;
                esac
            done
            
            create_worktree "$branch_name" "$base_branch" "$open_editor"
            ;;
    esac
}

# Run the main function with all arguments
main "$@"