#!/usr/bin/env bash

# Git Worktree Manager - Configuration Module
# Handles parsing and loading of .wtconfig files

# Function to parse simple TOML values
# This is a basic parser that handles the subset of TOML we need
parse_toml() {
    local file="$1"
    local section=""
    local key=""
    local value=""
    
    while IFS= read -r line; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        
        # Remove leading/trailing whitespace
        line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # Check for section headers
        if [[ "$line" =~ ^\[([^]]+)\]$ ]]; then
            section="${BASH_REMATCH[1]}"
            continue
        fi
        
        # Parse key-value pairs
        if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
            key=$(echo "${BASH_REMATCH[1]}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            value=$(echo "${BASH_REMATCH[2]}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            # Remove quotes from string values
            value=$(echo "$value" | sed 's/^"//;s/"$//' | sed "s/^'//;s/'$//")
            
            # Output in format: section.key=value
            if [[ -n "$section" ]]; then
                echo "${section}.${key}=${value}"
            else
                echo "${key}=${value}"
            fi
        fi
    done < "$file"
}

# Function to parse array values from TOML
parse_toml_array() {
    local file="$1"
    local array_path="$2"
    local in_array=false
    local section=""
    local key=""
    
    while IFS= read -r line; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        
        # Remove leading/trailing whitespace
        line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # Check for section headers
        if [[ "$line" =~ ^\[([^]]+)\]$ ]]; then
            section="${BASH_REMATCH[1]}"
            in_array=false
            continue
        fi
        
        # Check if we're at the target array
        if [[ "$line" == *"= [" ]]; then
            key=$(echo "$line" | sed 's/=.*//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            local full_key="${section}.${key}"
            [[ -z "$section" ]] && full_key="$key"
            
            if [[ "$full_key" == "$array_path" ]]; then
                in_array=true
            else
                in_array=false
            fi
            continue
        fi
        
        # End of array
        if [[ "$line" == "]" ]]; then
            in_array=false
            continue
        fi
        
        # Parse array elements
        if [[ "$in_array" == true ]]; then
            # Remove quotes and trailing comma
            value=$(echo "$line" | sed 's/,$//' | sed 's/^"//;s/"$//' | sed "s/^'//;s/'$//")
            [[ -n "$value" ]] && echo "$value"
        fi
    done < "$file"
}

# Function to load configuration from file
load_config_file() {
    local config_file="$1"
    
    # Check if config file exists
    if [[ ! -f "$config_file" ]]; then
        return 1
    fi
    
    # Parse and export configuration values
    while IFS='=' read -r key value; do
        # Convert dots to underscores for bash variable names
        var_name="WT_CONFIG_$(echo "$key" | tr '.' '_' | tr '[:lower:]' '[:upper:]')"
        export "$var_name=$value"
    done < <(parse_toml "$config_file")
    
    # Handle array configurations
    # Parse copy.include array
    if grep -q "include[[:space:]]*=" "$config_file"; then
        WT_CONFIG_COPY_INCLUDE=()
        while IFS= read -r item; do
            WT_CONFIG_COPY_INCLUDE+=("$item")
        done < <(parse_toml_array "$config_file" "copy.include")
    fi
    
    # Parse copy.exclude array
    if grep -q "exclude[[:space:]]*=" "$config_file"; then
        WT_CONFIG_COPY_EXCLUDE=()
        while IFS= read -r item; do
            WT_CONFIG_COPY_EXCLUDE+=("$item")
        done < <(parse_toml_array "$config_file" "copy.exclude")
    fi
    
    return 0
}

# Function to find and load project config
find_project_config() {
    local current_dir="$1"
    local config_file=""
    
    # Look for .wtconfig in current directory and parent directories
    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/.wtconfig" ]]; then
            config_file="$current_dir/.wtconfig"
            break
        fi
        current_dir=$(dirname "$current_dir")
    done
    
    echo "$config_file"
}

# Function to merge configurations (project overrides global)
merge_configs() {
    # Load global config first
    if [[ -f "$HOME/.wtrc" ]]; then
        source "$HOME/.wtrc"
    fi
    
    # Find and load project config
    local project_config=$(find_project_config "$(pwd)")
    if [[ -n "$project_config" ]]; then
        load_config_file "$project_config"
        export WT_PROJECT_CONFIG_PATH="$project_config"
    fi
}

# Function to get config value with fallback
get_config_value() {
    local key="$1"
    local default="$2"
    local var_name="WT_CONFIG_$(echo "$key" | tr '.' '_' | tr '[:lower:]' '[:upper:]')"
    
    # Check if variable exists
    if [[ -n "${!var_name+x}" ]]; then
        echo "${!var_name}"
    else
        echo "$default"
    fi
}

# Function to copy non-tracked files to new worktree
copy_worktree_files() {
    local source_dir="$1"
    local target_dir="$2"
    
    # Get configuration
    local use_gitignore=$(get_config_value "copy.use_gitignore" "true")
    
    # Create rsync exclude args
    local rsync_args=("-av")
    
    # Always exclude .git directory
    rsync_args+=("--exclude=.git/")
    
    # Add gitignore patterns if enabled
    if [[ "$use_gitignore" == "true" ]] && [[ -f "$source_dir/.gitignore" ]]; then
        rsync_args+=("--filter=:- .gitignore")
    fi
    
    # Add exclude patterns from config
    if [[ "${#WT_CONFIG_COPY_EXCLUDE[@]}" -gt 0 ]]; then
        for pattern in "${WT_CONFIG_COPY_EXCLUDE[@]}"; do
            rsync_args+=("--exclude=$pattern")
        done
    fi
    
    # Copy included files
    if [[ "${#WT_CONFIG_COPY_INCLUDE[@]}" -gt 0 ]]; then
        echo "Copying additional files to worktree..."
        for pattern in "${WT_CONFIG_COPY_INCLUDE[@]}"; do
            # Check if pattern matches any files
            if ls $source_dir/$pattern 1> /dev/null 2>&1; then
                for file in $source_dir/$pattern; do
                    if [[ -e "$file" ]]; then
                        # Get relative path
                        rel_path="${file#"$source_dir"/}"
                        target_file="$target_dir/$rel_path"
                        
                        # Create target directory if needed
                        mkdir -p "$(dirname "$target_file")"
                        
                        # Copy file
                        if [[ -d "$file" ]]; then
                            cp -r "$file" "$target_file"
                        else
                            cp "$file" "$target_file"
                        fi
                        echo "  Copied: $rel_path"
                    fi
                done
            fi
        done
    fi
}

# Export functions for use in main script
export -f parse_toml
export -f parse_toml_array
export -f load_config_file
export -f find_project_config
export -f merge_configs
export -f get_config_value
export -f copy_worktree_files